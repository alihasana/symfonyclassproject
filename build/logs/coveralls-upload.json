{"repo_token":"w45LMM1e8wJdtSabjyz9pIcTIqhT2k4Bl","git":{"branch":"master","head":{"id":"7ab18e9ae7e9cc02d680c6afd3360559a3d93bc0","author_name":"alihasana","author_email":"hasana.ali@gmail.com","committer_name":"alihasana","committer_email":"hasana.ali@gmail.com","message":"test"},"remotes":[{"name":"origin","url":"https:\/\/alihasana@github.com\/alihasana\/symfonyclassproject.git"}]},"run_at":"2019-10-04 14:33:48 +0000","source_files":[{"name":"src\/Controller\/DefaultController.php","source":"<?php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass DefaultController extends AbstractController {\n    public function home(Request $request){\n        dump('Inside Home');\n        $user = [\"name\" => $this->getUser()->getName(), \"email\" => $this->getUser()->getEmail(),  ];\n        dump($user);\n        $name = $request->query->get('name');\n        $array  = [\"01\" => \"Aliquam\", \"02\" => \"Tempus\", \"03\" => \"Magna\", \"04\" => \"Ipsum\", \"05\" => \"Consequat\", \"06\" => \"Etiam\"];\n        if(!empty($name)) {\n            $array = shuffle($array);\n        }\n        $data = [\n        \"img\" => $array,\n        \"user\" => $user\n        ];\n\n        return $this->render('home\/home.html.twig', $data);\n    }\n\n    \/\/ function shuffleArray($name, $array) {\n    \/\/     $newArray = [];\n    \/\/     for ($i=0; $i < count($array); $i++) {\n    \/\/         if($array[$i] !== $name )\n    \/\/             array_push($newArray, $array[$i]);\n    \/\/     }\n    \/\/     array_rand($newArray);\n    \/\/     array_unshift($newArray, $name)\n    \/\/     return $newArray;\n    \/\/ }\n}","coverage":[null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/Controller\/EventController.php","source":"<?php\n\nnamespace App\\Controller;\n\nuse App\\Controller\\MasterController;\nuse App\\Entity\\Event;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass EventController extends MasterController\n{\n    public function register(Request $request){\n        dump('Inside EventController register');\n        \n        $em = $this->getDoctrine()->getManager();\n        $event = new Event($request->get(\"name\"), $request->get(\"type\"), $request->get(\"dateEvent\"), $this->getUser());\n        try {\n            $em->persist($event);\n            $em->flush();\n            return $this->returnJson([\"Event created\"], 200);\n        } catch (Doctrine\\ORM\\EntityNotFoundException $e) {\n            return $this->returnJson([ $e->getMessage() ], 403);\n        }\n    }\n    \n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,0,0,0,0,0,0,0,null,null]},{"name":"src\/Controller\/MasterController.php","source":"<?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse App\\Entity\\Event;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n\nclass MasterController extends AbstractController\n{\n    protected function ds() {}\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/Controller\/PageController.php","source":"<?php\n\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass PageController extends AbstractController\n{\n    public function index()\n    {\n        return $this->render('page\/index.html.twig', [\n            'controller_name' => 'PageController',\n        ]);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,0,0,0,0,0,null]},{"name":"src\/Controller\/UserController.php","source":"<?php\nnamespace App\\Controller;\n\nuse App\\Controller\\MasterController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse App\\Entity\\User;\nuse Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;\n\nclass UserController extends MasterController {\n    public function register(Request $request, UserPasswordEncoderInterface $encodePass){\n        dump('Inside register');\n        \n        if(!filter_var( $request -> get(\"email\"), FILTER_VALIDATE_EMAIL ))\n            return $this->returnJson([\"PLEASE PROVIDE VALIDE EMAIL SYNTAX\"], 403);\n        $er = $this->getDoctrine()->getRepository(User::Class);\n        $theUser = $er->findOneBy([\"email\" => $request->get(\"email\")]);\n        dump($theUser);\n        if(!$theUser) {\n            $em = $this->getDoctrine()->getManager();\n            $user = new User($request->get(\"name\"), $request->get(\"email\"), $request->get(\"password\"));\n            $user->setPassword($encodePass->encodePassword($user, $request->get(\"password\")));\n            try {\n               $em->persist($user);\n               $em->flush();\n               return $this->returnJson([\"User created\"], 200);\n            } catch (Doctrine\\ORM\\EntityNotFoundException $e) {\n                return $this->returnJson([ $e->getMessage() ], 403);\n            }\n        } else return $this->returnJson([\"Email already exits\"], 200);\n         \/\/   return $this->render('register\/register.html.twig');\n    }\n\n    public function getLogin(){\n        dump('Inside getLogin');\n        return $this->redirectToRoute('index');\n    }\n    \n    public function postLogin(AuthenticationUtils $authenticationUtils){\n        dump('Inside postLogin');\n        $error = $authenticationUtils->getLastAuthenticationError();\n        $email = $authenticationUtils->getLastUsername();\n        return $this -> redirectToRoute('login_post');\n    }\n\n    \n\n    \/** \n     * Return in JSON Formate\n     * @param \n     *\/\n    private function returnJson($data, $status = 200) {\n        return new Response(json_encode($data), $status, [\"Content-Type\" => \"application\/json\"]);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,null,null,0,0,0,null,null,0,0,0,0,0,null,null,null,null,null,null,null,null,0,0,null]},{"name":"src\/Entity\/Event.php","source":"<?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n\/**\n * @ORM\\Entity(repositoryClass=\"App\\Repository\\EventRepository\")\n *\/\nclass Event\n{\n    \/**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     *\/\n    private $id;\n\n    \/**\n     * @ORM\\Column(type=\"string\", length=75, nullable=true)\n     *\/\n    private $typeEvent;\n\n    \/**\n     * @ORM\\Column(type=\"datetime\", nullable=true)\n     *\/\n    private $dateEvent;\n\n    \/**\n     * @ORM\\ManyToOne(targetEntity=\"App\\Entity\\User\", inversedBy=\"events\")\n     *\/\n    private $creator;\n\n    \/**\n     * @ORM\\ManyToMany(targetEntity=\"App\\Entity\\User\", inversedBy=\"events\")\n     *\/\n    private $participator;\n\n    public function __construct($name, $type, $dateEvent, $user)\n    {\n        $this->setName($name);\n        $this->setTypeEvent($type);\n        $this->setDateEvent($dateEvent);\n        $this->setCreator($dateEvent);\n        $this->participator = new ArrayCollection();\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getTypeEvent(): ?string\n    {\n        return $this->typeEvent;\n    }\n\n    public function setTypeEvent(?string $typeEvent): self\n    {\n        $this->typeEvent = $typeEvent;\n\n        return $this;\n    }\n\n    public function getDateEvent(): ?\\DateTimeInterface\n    {\n        return $this->typeEvent;\n    }\n\n    public function setDateEvent(\\DateTimeInterface $typeEvent): self\n    {\n        $this->typeEvent = $typeEvent;\n\n        return $this;\n    }\n\n\n    public function getCreator(): ?User\n    {\n        return $this->creator;\n    }\n\n    public function setCreator(?User $creator): self\n    {\n        $this->creator = $creator;\n\n        return $this;\n    }\n\n    \/**\n     * @return Collection|User[]\n     *\/\n    public function getParticipator(): Collection\n    {\n        return $this->participator;\n    }\n\n    public function addParticipator(User $participator): self\n    {\n        if (!$this->participator->contains($participator)) {\n            $this->participator[] = $participator;\n        }\n\n        return $this;\n    }\n\n    public function removeParticipator(User $participator): self\n    {\n        if ($this->participator->contains($participator)) {\n            $this->participator->removeElement($participator);\n        }\n\n        return $this;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,null,0,0,0,null,null,0,0,null,0,0,null,null,null,null,null,0,0,0,null,null,0,0,0,0,null,0,0,null,null,0,0,0,0,null,0,0,null]},{"name":"src\/Entity\/User.php","source":"<?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\n\/**\n * @ORM\\Entity(repositoryClass=\"App\\Repository\\UserRepository\")\n *\/\nclass User implements UserInterface\n{\n    \/**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     *\/\n    private $id;\n\n    \/**\n     * @ORM\\Column(type=\"string\", length=100)\n     *\/\n    private $name;\n\n    \/**\n     * @ORM\\Column(type=\"string\", length=255)\n     *\/\n    private $email;\n\n    \/**\n     * @ORM\\Column(type=\"array\")\n     *\/\n    private $role = [];\n\n    \/**\n     * @ORM\\Column(type=\"datetime\", nullable=true)\n     *\/\n    private $createdAt;\n\n    \/**\n     * @ORM\\Column(type=\"datetime\", nullable=true)\n     *\/\n    private $modifiedAt;\n\n    public function __construct($name, $email, $password) {\n        $this->setName($name);\n        $this->setEmail($email);\n        $this->setPassword($password);\n        $this->setRoles();\n        $this->events = new ArrayCollection();\n    }\n\n    \/**\n     * @ORM\\Column(type=\"string\", length=255)\n     *\/\n    private $password;\n\n    \/**\n     * @ORM\\OneToMany(targetEntity=\"App\\Entity\\Event\", mappedBy=\"creator\")\n     *\/\n    private $events;\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    public function getName(): ?string\n    {\n        return $this->name;\n    }\n\n    public function setName(string $name): self\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    public function getEmail(): ?string\n    {\n        return $this->email;\n    }\n\n    public function setEmail(string $email): self\n    {\n        $this->email = $email;\n\n        return $this;\n    }\n\n    public function getRoles(): ?array\n    {\n        return $this->role;\n    }\n\n    public function setRoles(array $role = [\"ROLE_USER\"]): self\n    {\n        $this->role = $role;\n\n        return $this;\n    }\n\n    public function getCreatedAt(): ?\\DateTimeInterface\n    {\n        return $this->createdAt;\n    }\n\n    public function setCreatedAt(\\DateTimeInterface $createdAt): self\n    {\n        $this->createdAt = $createdAt;\n\n        return $this;\n    }\n\n    public function getModifiedAt(): ?\\DateTimeInterface\n    {\n        return $this->modifiedAt;\n    }\n\n    public function setModifiedAt(\\DateTimeInterface $modifiedAt): self\n    {\n        $this->modifiedAt = $modifiedAt;\n\n        return $this;\n    }\n\n    public function getPassword(): ?string\n    {\n        return $this->password;\n    }\n\n    public function setPassword(string $password): self\n    {\n        $this->password = $password;\n\n        return $this;\n    }\n\n    public function getUsername() {\n        return $this->getEmail();\n    }\n    public function getSalt() {\n        \n    }\n    public function eraseCredentials () {\n        \n    }\n\n    \/**\n     * @return Collection|Event[]\n     *\/\n    public function getEvents(): Collection\n    {\n        return $this->events;\n    }\n\n    public function addEvent(Event $event): self\n    {\n        if (!$this->events->contains($event)) {\n            $this->events[] = $event;\n            $event->setCreator($this);\n        }\n\n        return $this;\n    }\n\n    public function removeEvent(Event $event): self\n    {\n        if ($this->events->contains($event)) {\n            $this->events->removeElement($event);\n            \/\/ set the owning side to null (unless already changed)\n            if ($event->getCreator() === $this) {\n                $event->setCreator(null);\n            }\n        }\n\n        return $this;\n    }\n\n    public function getRole(): ?array\n    {\n        return $this->role;\n    }\n\n    public function setRole(array $role): self\n    {\n        $this->role = $role;\n\n        return $this;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,null,null,0,null,null,null,null,0,null,null,0,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null,null,0,0,null,null,0,null,null,0,null,null,null,null,null,0,0,0,null,null,0,0,0,0,0,null,0,0,null,null,0,0,0,null,0,0,0,0,null,0,0,null,null,0,0,0,null,null,0,0,null,0,0,null]},{"name":"src\/Kernel.php","source":"<?php\n\nnamespace App;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Kernel\\MicroKernelTrait;\nuse Symfony\\Component\\Config\\Loader\\LoaderInterface;\nuse Symfony\\Component\\Config\\Resource\\FileResource;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\nuse Symfony\\Component\\Routing\\RouteCollectionBuilder;\n\nclass Kernel extends BaseKernel\n{\n    use MicroKernelTrait;\n\n    private const CONFIG_EXTS = '.{php,xml,yaml,yml}';\n\n    public function registerBundles(): iterable\n    {\n        $contents = require $this->getProjectDir().'\/config\/bundles.php';\n        foreach ($contents as $class => $envs) {\n            if ($envs[$this->environment] ?? $envs['all'] ?? false) {\n                yield new $class();\n            }\n        }\n    }\n\n    public function getProjectDir(): string\n    {\n        return \\dirname(__DIR__);\n    }\n\n    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader): void\n    {\n        $container->addResource(new FileResource($this->getProjectDir().'\/config\/bundles.php'));\n        $container->setParameter('container.dumper.inline_class_loader', true);\n        $confDir = $this->getProjectDir().'\/config';\n\n        $loader->load($confDir.'\/{packages}\/*'.self::CONFIG_EXTS, 'glob');\n        $loader->load($confDir.'\/{packages}\/'.$this->environment.'\/**\/*'.self::CONFIG_EXTS, 'glob');\n        $loader->load($confDir.'\/{services}'.self::CONFIG_EXTS, 'glob');\n        $loader->load($confDir.'\/{services}_'.$this->environment.self::CONFIG_EXTS, 'glob');\n    }\n\n    protected function configureRoutes(RouteCollectionBuilder $routes): void\n    {\n        $confDir = $this->getProjectDir().'\/config';\n\n        $routes->import($confDir.'\/{routes}\/'.$this->environment.'\/**\/*'.self::CONFIG_EXTS, '\/', 'glob');\n        $routes->import($confDir.'\/{routes}\/*'.self::CONFIG_EXTS, '\/', 'glob');\n        $routes->import($confDir.'\/{routes}'.self::CONFIG_EXTS, '\/', 'glob');\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,1,null,null,1,null,null,null,1,null,null,null,null,0,0,0,null,0,0,0,0,0,null,null,null,0,null,0,0,0,0,null]},{"name":"src\/Migrations\/Version20190510074054.php","source":"<?php\n\ndeclare(strict_types=1);\n\nnamespace DoctrineMigrations;\n\nuse Doctrine\\DBAL\\Schema\\Schema;\nuse Doctrine\\Migrations\\AbstractMigration;\n\n\/**\n * Auto-generated Migration: Please modify to your needs!\n *\/\nfinal class Version20190510074054 extends AbstractMigration\n{\n    public function getDescription() : string\n    {\n        return '';\n    }\n\n    public function up(Schema $schema) : void\n    {\n        \/\/ this up() migration is auto-generated, please modify it to your needs\n        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \\'mysql\\'.');\n\n        $this->addSql('CREATE TABLE event (id INT AUTO_INCREMENT NOT NULL, creator_id INT DEFAULT NULL, type_event VARCHAR(75) DEFAULT NULL, INDEX IDX_3BAE0AA761220EA6 (creator_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ENGINE = InnoDB');\n        $this->addSql('CREATE TABLE event_user (event_id INT NOT NULL, user_id INT NOT NULL, INDEX IDX_92589AE271F7E88B (event_id), INDEX IDX_92589AE2A76ED395 (user_id), PRIMARY KEY(event_id, user_id)) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ENGINE = InnoDB');\n        $this->addSql('CREATE TABLE user (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(100) NOT NULL, email VARCHAR(255) NOT NULL, role LONGTEXT NOT NULL COMMENT \\'(DC2Type:array)\\', created_at DATETIME NOT NULL, modified_at DATETIME NOT NULL, password VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ENGINE = InnoDB');\n        $this->addSql('CREATE TABLE type_event (id INT AUTO_INCREMENT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ENGINE = InnoDB');\n        $this->addSql('ALTER TABLE event ADD CONSTRAINT FK_3BAE0AA761220EA6 FOREIGN KEY (creator_id) REFERENCES user (id)');\n        $this->addSql('ALTER TABLE event_user ADD CONSTRAINT FK_92589AE271F7E88B FOREIGN KEY (event_id) REFERENCES event (id) ON DELETE CASCADE');\n        $this->addSql('ALTER TABLE event_user ADD CONSTRAINT FK_92589AE2A76ED395 FOREIGN KEY (user_id) REFERENCES user (id) ON DELETE CASCADE');\n    }\n\n    public function down(Schema $schema) : void\n    {\n        \/\/ this down() migration is auto-generated, please modify it to your needs\n        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \\'mysql\\'.');\n\n        $this->addSql('ALTER TABLE event_user DROP FOREIGN KEY FK_92589AE271F7E88B');\n        $this->addSql('ALTER TABLE event DROP FOREIGN KEY FK_3BAE0AA761220EA6');\n        $this->addSql('ALTER TABLE event_user DROP FOREIGN KEY FK_92589AE2A76ED395');\n        $this->addSql('DROP TABLE event');\n        $this->addSql('DROP TABLE event_user');\n        $this->addSql('DROP TABLE user');\n        $this->addSql('DROP TABLE type_event');\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,null,0,null,0,0,0,0,0,0,0,0,null,null,0,null,0,null,0,0,0,0,0,0,0,0,null]},{"name":"src\/Repository\/EventRepository.php","source":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\Event;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Symfony\\Bridge\\Doctrine\\RegistryInterface;\n\n\/**\n * @method Event|null find($id, $lockMode = null, $lockVersion = null)\n * @method Event|null findOneBy(array $criteria, array $orderBy = null)\n * @method Event[]    findAll()\n * @method Event[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass EventRepository extends ServiceEntityRepository\n{\n    public function __construct(RegistryInterface $registry)\n    {\n        parent::__construct($registry, Event::class);\n    }\n\n    \/\/ \/**\n    \/\/  * @return Event[] Returns an array of Event objects\n    \/\/  *\/\n    \/*\n    public function findByExampleField($value)\n    {\n        return $this->createQueryBuilder('e')\n            ->andWhere('e.exampleField = :val')\n            ->setParameter('val', $value)\n            ->orderBy('e.id', 'ASC')\n            ->setMaxResults(10)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n    *\/\n\n    \/*\n    public function findOneBySomeField($value): ?Event\n    {\n        return $this->createQueryBuilder('e')\n            ->andWhere('e.exampleField = :val')\n            ->setParameter('val', $value)\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n    }\n    *\/\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/Repository\/TypeEventRepository.php","source":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\TypeEvent;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Symfony\\Bridge\\Doctrine\\RegistryInterface;\n\n\/**\n * @method TypeEvent|null find($id, $lockMode = null, $lockVersion = null)\n * @method TypeEvent|null findOneBy(array $criteria, array $orderBy = null)\n * @method TypeEvent[]    findAll()\n * @method TypeEvent[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass TypeEventRepository extends ServiceEntityRepository\n{\n    public function __construct(RegistryInterface $registry)\n    {\n        parent::__construct($registry, TypeEvent::class);\n    }\n\n    \/\/ \/**\n    \/\/  * @return TypeEvent[] Returns an array of TypeEvent objects\n    \/\/  *\/\n    \/*\n    public function findByExampleField($value)\n    {\n        return $this->createQueryBuilder('t')\n            ->andWhere('t.exampleField = :val')\n            ->setParameter('val', $value)\n            ->orderBy('t.id', 'ASC')\n            ->setMaxResults(10)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n    *\/\n\n    \/*\n    public function findOneBySomeField($value): ?TypeEvent\n    {\n        return $this->createQueryBuilder('t')\n            ->andWhere('t.exampleField = :val')\n            ->setParameter('val', $value)\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n    }\n    *\/\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/Repository\/UserRepository.php","source":"<?php\n\nnamespace App\\Repository;\n\nuse App\\Entity\\User;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Symfony\\Bridge\\Doctrine\\RegistryInterface;\n\n\/**\n * @method User|null find($id, $lockMode = null, $lockVersion = null)\n * @method User|null findOneBy(array $criteria, array $orderBy = null)\n * @method User[]    findAll()\n * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\n *\/\nclass UserRepository extends ServiceEntityRepository\n{\n    public function __construct(RegistryInterface $registry)\n    {\n        parent::__construct($registry, User::class);\n    }\n\n    \/\/ \/**\n    \/\/  * @return User[] Returns an array of User objects\n    \/\/  *\/\n    \/*\n    public function findByExampleField($value)\n    {\n        return $this->createQueryBuilder('u')\n            ->andWhere('u.exampleField = :val')\n            ->setParameter('val', $value)\n            ->orderBy('u.id', 'ASC')\n            ->setMaxResults(10)\n            ->getQuery()\n            ->getResult()\n        ;\n    }\n    *\/\n\n    \/*\n    public function findOneBySomeField($value): ?User\n    {\n        return $this->createQueryBuilder('u')\n            ->andWhere('u.exampleField = :val')\n            ->setParameter('val', $value)\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n    }\n    *\/\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"src\/Util\/Calculator.php","source":"<?php\n\nnamespace App\\Util;\n\nclass Calculator\n{\n    public function add(int $a, int $b): int\n    {\n        return $a + $b;\n    }\n}","coverage":[null,null,null,null,null,null,null,0,0,0,null]}],"environment":{"packagist_version":"2.1.0"}}